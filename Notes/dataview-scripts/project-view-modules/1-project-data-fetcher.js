/**
 * –°–∫–∞–Ω–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏, –Ω–∞—Ö–æ–¥–∏—Ç –≤ –Ω–∏—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.
 * @async
 * @param {object} dv - –û–±—ä–µ–∫—Ç API Dataview, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞.
 * @param {object} app - –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç Obsidian App.
 * @returns {Promise<{structuredData: Array<object>, flatTocEntries: Array<object>}>} - –ü—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º —Å –¥–≤—É–º—è –º–∞—Å—Å–∏–≤–∞–º–∏: structuredData (–æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –±–ª–æ–∫–∞–º) –∏ flatTocEntries (–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è).
 */
async function fetchData(dv, app) {
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–π –∑–∞–º–µ—Ç–∫–∏-–ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –µ–≥–æ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ, —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è. –≠—Ç–æ –Ω–∞—à –≥–ª–∞–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä.
    const filterProject = dv.current().file.name.toLowerCase();
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É, —á—Ç–æ–±—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–µ –≤–∫–ª—é—á–∏—Ç—å —Å–∞–º—É –∑–∞–º–µ—Ç–∫—É-–ø—Ä–æ–µ–∫—Ç –≤ —Å–ø–∏—Å–æ–∫ –µ–µ –∑–∞–¥–∞—á.
    const currentPath = dv.current().file.path;

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –≤–æ –≤—Å–µ–º —Å–∫—Ä–∏–ø—Ç–µ.
    function parseDate(dateStr) { return moment(dateStr, 'DD-MM-YYYY').toDate(); }
    function formatDate(date) { return moment(date).format('DD-MM-YYYY'); }
    function getStatusIcon(status) {
        const icons = {
            'backlog': 'üóíÔ∏è', 'to do': 'üìã', 'canceled': 'üö´',
            '–≤ —Ä–∞–±–æ—Ç–µ': '‚öôÔ∏è', '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ': 'üîç',
            '–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è': 'üîÅ', 'done': '‚òëÔ∏è'
        };
        return icons[status.toLowerCase()] || '‚ùì';
    }

    /**
     * –°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –≤ –ø–æ–∏—Å–∫–∞—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–±—Ä–∞—Ç—å
     * —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã, –∫–æ–≥–¥–∞ –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π –≤–µ–ª–∞—Å—å —Ä–∞–±–æ—Ç–∞, —á—Ç–æ –≥–æ—Ä–∞–∑–¥–æ —Ç–æ—á–Ω–µ–µ, —á–µ–º –æ–¥–Ω–æ —Å—Ç–∞—Ç–∏—á–Ω–æ–µ –ø–æ–ª–µ 'date'.
     * @async
     * @param {string} taskName - –ò–º—è —Ñ–∞–π–ª–∞ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏.
     * @returns {Promise<Array<Date>>} - –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ Date, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–∞—Ç–∞–º –∏–∑ –∏–º–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫.
     */
    async function getEventDatesFromDailyNotes(taskName) {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –ø–∞–ø–∫–µ "periodic/daily".
        const dailyNotes = dv.pages('"periodic/daily"').values;
        const eventDates = [];
        for (const page of dailyNotes) {
            const file = app.vault.getAbstractFileByPath(page.file.path);
            if (file?.extension === 'md') {
                // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏ –∏—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—à—É –∑–∞–¥–∞—á—É.
                const fileContent = await app.vault.cachedRead(file);
                const taskHeaderPattern = new RegExp(`###\\s*[^\\n]*\\[\\[${taskName}(#[^\\]]+)?\\]\\]`, 'i');
                if (taskHeaderPattern.test(fileContent)) {
                    // –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤.
                    const date = parseDate(page.file.name);
                    if (date) eventDates.push(date);
                }
            }
        }
        return eventDates;
    }

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ Kanban-–¥–æ—Å–∫–∏, —Å–∫–∞–Ω–∏—Ä—É–µ–º –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É "–∏–º—è –∑–∞–¥–∞—á–∏ -> –µ–µ —Å—Ç–∞—Ç—É—Å –∏ –¥–æ—Å–∫–∞".
    // –≠—Ç–æ –∫–ª—é—á–µ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –º—ã –æ–¥–∏–Ω —Ä–∞–∑ —á–∏—Ç–∞–µ–º –≤—Å–µ –¥–æ—Å–∫–∏ –∏ —Å–æ–∑–¥–∞–µ–º –±—ã—Å—Ç—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞,
    // –≤–º–µ—Å—Ç–æ —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞.
    const kanbanFiles = app.vault.getMarkdownFiles().filter(file => file.path.startsWith('kanban/'));
    const taskBoardStatusMap = {};
    for (const kanbanFile of kanbanFiles) {
        const kanbanContent = await app.vault.cachedRead(kanbanFile);
        let currentStatus = null;
        kanbanContent.split('\n').forEach(line => {
            const headingMatch = line.match(/^##\s+(.*)/);
            if (headingMatch) {
                // –ö–æ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (## To do), –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ –∫–∞–∫ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å.
                currentStatus = headingMatch[1].trim();
            } else if (currentStatus) {
                // –î–ª—è –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫ –∏—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–¥–∞—á–∏.
                const linkMatch = line.match(/\[\[([^\]]+)\]\]/);
                if (linkMatch) {
                    // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å—Å—ã–ª–∫—É, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—à—É –∫–∞—Ä—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–∞ –∑–∞–¥–∞—á–∞ –∏–º–µ–µ—Ç `currentStatus` –Ω–∞ —ç—Ç–æ–π `kanbanFile`.
                    const taskName = linkMatch[1].trim();
                    if (!taskBoardStatusMap[taskName]) taskBoardStatusMap[taskName] = [];
                    taskBoardStatusMap[taskName].push({
                        kanbanBoard: kanbanFile.basename,
                        status: currentStatus
                    });
                }
            }
        });
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º API Dataview –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (YAML frontmatter) —É–∫–∞–∑–∞–Ω —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç.
    const pages = dv.pages().filter(p => {
        if (!p.project) return false;
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (`project: ProjA`), —Ç–∞–∫ –∏ –º–∞—Å—Å–∏–≤ (`project: [ProjA, ProjB]`).
        const projects = Array.isArray(p.project) ? p.project : [p.project];
        const lowercaseProjects = projects.map(proj => String(proj).toLowerCase());
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞—à–µ–π –∑–∞–º–µ—Ç–∫–∏ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç, –∏ –∏—Å–∫–ª—é—á–∞–µ–º —Å–∞–º—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–µ–∫—Ç–∞.
        return lowercaseProjects.includes(filterProject) && p.file.path !== currentPath;
    });

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –µ–¥–∏–Ω—ã–π –æ–±—ä–µ–∫—Ç.
    let data = [];
    for (let page of pages) {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –∏–∑ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫.
        let eventDates = await getEventDatesFromDailyNotes(page.file.name);
        // –ï—Å–ª–∏ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫–∞—Ö –¥–∞—Ç –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.
        if (!eventDates.length && page.date) eventDates.push(parseDate(page.date));
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –∏ —Å–∞–º—É—é –ø–æ–∑–¥–Ω—é—é –¥–∞—Ç—É, —á—Ç–æ–±—ã –≤—ã—á–∏—Å–ª–∏—Ç—å –ø–µ—Ä–∏–æ–¥ —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π.
        let startDate = eventDates.length ? new Date(Math.min(...eventDates)) : null;
        let endDate = eventDates.length ? new Date(Math.max(...eventDates)) : null;
        
        const taskName = page.file.name;
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É –∑–∞—Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏ –¥–æ—Å–æ–∫ –∑–∞–¥–∞—á–∏.
        const taskBoardStatusList = taskBoardStatusMap[taskName] || [];
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Set, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ—Å–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å–æ–≤ (–Ω–∞ —Å–ª—É—á–∞–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤).
        const uniqueKanbanBoards = [...new Set(taskBoardStatusList.map(entry => entry.kanbanBoard))];
        const uniqueStatuses = [...new Set(taskBoardStatusList.map(entry => entry.status))];
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã —Å –∏–∫–æ–Ω–∫–∞–º–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        const statusIcons = uniqueStatuses.map(s => `${s} ${getStatusIcon(s)}`).join(', ') || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –æ–¥–Ω–∞ –¥–∞—Ç–∞ —É –Ω–∞—Å –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω.
        let executionTime;
        if (startDate && endDate && startDate.getTime() !== endDate.getTime()) {
            executionTime = `${formatDate(startDate)} ‚Äî ${formatDate(endDate)}`;
        } else if (startDate) {
            executionTime = formatDate(startDate);
        } else {
            executionTime = "–ù–µ—Ç –¥–∞—Ç—ã";
        }
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∏—Ç–æ–≥–æ–≤—ã–π –º–∞—Å—Å–∏–≤.
        data.push({
            note: page.file.link,
            instance: page.instance || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            kanbanBoards: uniqueKanbanBoards.join(', ') || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            status: statusIcons,
            executionTime,
            startDate // –°–æ—Ö—Ä–∞–Ω—è–µ–º startDate –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
        });
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ. –ó–∞–¥–∞—á–∏ –±–µ–∑ –¥–∞—Ç—ã –æ–∫–∞–∂—É—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞.
    data.sort((a, b) => (a.startDate || Infinity) - (b.startDate || Infinity));
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö.
    return data;
}

// "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º" —Ñ—É–Ω–∫—Ü–∏—é fetchData, —á—Ç–æ–±—ã –µ–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏ –≤—ã–∑–≤–∞—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ project-view.js.
return { fetchData };